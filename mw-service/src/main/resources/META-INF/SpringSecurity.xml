<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:security="http://www.springframework.org/schema/security"

	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd">

 	<security:global-method-security
 		secured-annotations="enabled" jsr250-annotations="enabled" />

	<security:http auto-config="true"
		security-context-repository-ref="sessionSecurityContextRepository">
		<security:intercept-url pattern="/rest/client/login"
			access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<security:intercept-url pattern="/rest/client/password" method="POST"
			access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<security:intercept-url pattern="/rest/client/questions" method="GET"
			access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<security:intercept-url pattern="/rest/captcha" method="GET"
			access="IS_AUTHENTICATED_ANONYMOUSLY" />
		
		<security:intercept-url pattern="/**"
			access="IS_AUTHENTICATED_FULLY" />
		<security:http-basic />
	</security:http>

	<!-- This needs to change to a distributed cache (example: memcached) if 
		we want to use a clustered servlet containers -->
	<bean id="sessionSecurityContextRepository"
		class="org.springframework.security.web.context.HttpSessionSecurityContextRepository" />

	<bean id="mwAuthenticationProvider"
		class="com.quikj.mw.service.framework.MiddlewareAuthenticationProvider">
		<property name="clientBean" ref="clientBean" />
	</bean>

	<security:authentication-manager alias="authManager">
		<security:authentication-provider
			ref="mwAuthenticationProvider" />
	</security:authentication-manager>

</beans>
